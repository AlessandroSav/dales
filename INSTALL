DALES version 3.2
===================
Packages are available at www.gitorious.org/dales
If git is installed, the best way to obtain DALES is with:

git clone git://gitorious.org/dales/dales.git 
For updates you can then just use the command 
git pull origin master

Then follow the following instructions:
1) cd dales 
2) mkdir build 
3) cd build 
4) cmake ..
5) make install

This should provide the dales3 binary in the build dir. New builds can be
made by 'make install' in the build directory. The documentation is build by typing

make docs

in the build directory.

ALTERNATIVE BUILDS
==================

One can change between release and debug options by invoking commandline options of cmake:

cmake -DCMAKE_BUILD_TYPE="DEBUG" ..

or "RELEASE", if that is the build-type desired.
Various case specific routines can be found in de dales/case/<casename> and are built by invoking

cmake -DCASE="<casename>"

where "<casename>" could be something like "rico". Regardless of the case built, the standard DALES runs are always possible (and default).


DEPENDENCIES
============

Dependencies of DALES are
1) MPI (the only obligatory one)
2) NetCDF (optional)
3) CMake (alternatively, the old makefile icw makedepf90 still works)
4) Doxygen, DOT and LaTeX for building the documentation

NOTES ON NETCDF LIBRARIES (JvdD)
================================
When trying to compile the code using netcdf4 in combination with hdf5 and options for parallel writing, the respective modules with the suffix -mp must be loaded.
This gives problems when compiling however. Changes have to be made to the CMakeLists.txt files in both the main Git directory and in the /src directory.

If the settings are not correct in these files (e.g. the files do not link to the appropriate netcdf locations) a warning message is shown when using cmake.
(NOTE that this must be done in a completely empty directory, otherwise nothing seems to change.) Compiling will not be possible then.

At this moment, the new (default) modules don't work. There is a problem with the link for NetCDF-mp/4.1.2 (the lib directory does not exist).

NOTES ON COMPILING WITH SCALASCA (JvdD)
=======================================
It is not trivial to use scalasca together with cmake. The code has to be compiled, not only with mpfort ..., but with 'scalasca -instrument' in front of it.
To achieve this is quite hard.
Erwin used a workaround, making a bash script that acts like an alias (in /home/vddussen/bin/scalasca). This script is called and the compilation works. An extra if statement 
is added in the CMakeLists.txt file. One method to set the PROFILER variable to SCALASCA is to run:
ccmake -i -DCMAKE_BUILD_TYPE="DEBUG" ../Git/
which opens a separate program in which PROFILER can be set (follow instructions in the bottom left part of the window, to start inserting, press [enter]).
It is also possible to directly put in the value for PROFILER:

ccmake -i -D PROFILER=SCALASCE -DCMAKE_BUILD_TYPE="DEBUG" ../Git/

The executable then has to be called using 'scalasca -analyze' in front of it (in the job submit script).

Finally, when the model has finished, the epik.... directory can be analyzed using:
scalasca -examine epik_...

